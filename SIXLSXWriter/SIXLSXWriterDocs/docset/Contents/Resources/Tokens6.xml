<?xml version="1.0" encoding="UTF-8"?>
<Tokens version="1.0">
	<File path="Classes/SIXLSXWorksheet.html">
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/cl/SIXLSXWorksheet</TokenIdentifier>
			<Abstract type="html">Defines a worksheet contained in the files workbook.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
            
			
			<NodeRef refid="6"/>
		</Token>
		
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeString:toCell:withFormat:</TokenIdentifier>
			<Abstract type="html">writes a string to a worksheet cell.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeString:(NSString *)string toCell:(NSString *)cellIdentifier withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">string to write</Abstract>
				</Parameter><Parameter>
					<Name>cellIdentifier</Name>
					<Abstract type="html">cell identifier in Excel style (ex. @&quot;A1&quot;)</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeString:toCell:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeString:toRow:andColumn:withFormat:</TokenIdentifier>
			<Abstract type="html">writes a string to a worksheet cell.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeString:(NSString *)string toRow:(int)row andColumn:(int)column withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>string</Name>
					<Abstract type="html">writes a string to a worksheet cell.</Abstract>
				</Parameter><Parameter>
					<Name>row</Name>
					<Abstract type="html">row of cell</Abstract>
				</Parameter><Parameter>
					<Name>column</Name>
					<Abstract type="html">column of cell</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeString:toRow:andColumn:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeNumber:toCell:withFormat:</TokenIdentifier>
			<Abstract type="html">Writes a number to a cell on your worksheet.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeNumber:(NSNumber *)number toCell:(NSString *)cellIdentifier withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>number</Name>
					<Abstract type="html">numeric value to write</Abstract>
				</Parameter><Parameter>
					<Name>cellIdentifier</Name>
					<Abstract type="html">cell identifier in Excel style (ex. @&quot;A1&quot;)</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeNumber:toCell:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeNumber:toRow:andColumn:withFormat:</TokenIdentifier>
			<Abstract type="html">Writes a number to a cell on your worksheet.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeNumber:(NSNumber *)number toRow:(int)row andColumn:(int)column withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>number</Name>
					<Abstract type="html">numeric value to write</Abstract>
				</Parameter><Parameter>
					<Name>row</Name>
					<Abstract type="html">row index of the cell</Abstract>
				</Parameter><Parameter>
					<Name>column</Name>
					<Abstract type="html">column index of the cell</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to apply or nil</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successfull, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeNumber:toRow:andColumn:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeDate:toCell:withFormat:</TokenIdentifier>
			<Abstract type="html">Writes a date to a cell on your worksheet.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeDate:(NSDate *)date toCell:(NSString *)cellIdentifier withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">date value to write</Abstract>
				</Parameter><Parameter>
					<Name>cellIdentifier</Name>
					<Abstract type="html">cell identifier in Excel style (ex. @&quot;A1&quot;)</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeDate:toCell:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeDate:toRow:andColumn:withFormat:</TokenIdentifier>
			<Abstract type="html">Writes a date to a cell on your worksheet.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeDate:(NSDate *)date toRow:(int)row andColumn:(int)column withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>date</Name>
					<Abstract type="html">date value to write</Abstract>
				</Parameter><Parameter>
					<Name>row</Name>
					<Abstract type="html">index of cell row</Abstract>
				</Parameter><Parameter>
					<Name>column</Name>
					<Abstract type="html">index of column</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeDate:toRow:andColumn:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeFormula:toCell:withFormat:</TokenIdentifier>
			<Abstract type="html">Writes a formula to a cell on your worksheet.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeFormula:(NSString *)formula toCell:(NSString *)cellIdentifier withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>formula</Name>
					<Abstract type="html">formula to use</Abstract>
				</Parameter><Parameter>
					<Name>cellIdentifier</Name>
					<Abstract type="html">cell identifier in Excel style (ex. @&quot;A1&quot;)</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeFormula:toCell:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeFormula:toRow:andColumn:withFormat:</TokenIdentifier>
			<Abstract type="html">Writes a formula to a cell on your worksheet.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/cl/SIXLSXFormat</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)writeFormula:(NSString *)formula toRow:(int)row andColumn:(int)column withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>formula</Name>
					<Abstract type="html">formula to use</Abstract>
				</Parameter><Parameter>
					<Name>row</Name>
					<Abstract type="html">index of cell row</Abstract>
				</Parameter><Parameter>
					<Name>column</Name>
					<Abstract type="html">index of cell column</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeFormula:toRow:andColumn:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeFormula:withResult:toRow:andColumn:withFormat:</TokenIdentifier>
			<Abstract type="html">This method writes a formula or Excel function to the cell specified by row and column with a user defined result.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeFormula:(NSString *)formula withResult:(NSNumber *)result toRow:(int)row andColumn:(int)column withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>formula</Name>
					<Abstract type="html">formula to use</Abstract>
				</Parameter><Parameter>
					<Name>result</Name>
					<Abstract type="html">calculation result to use</Abstract>
				</Parameter><Parameter>
					<Name>row</Name>
					<Abstract type="html">index of cell row</Abstract>
				</Parameter><Parameter>
					<Name>column</Name>
					<Abstract type="html">index of cell column</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeFormula:withResult:toRow:andColumn:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/writeFormula:withResult:toCell:withFormat:</TokenIdentifier>
			<Abstract type="html">This method writes a formula or Excel function to the cell specified by row and column with a user defined result.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)writeFormula:(NSString *)formula withResult:(NSNumber *)result toCell:(NSString *)cellIdentifier withFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>formula</Name>
					<Abstract type="html">formula to use</Abstract>
				</Parameter><Parameter>
					<Name>result</Name>
					<Abstract type="html">calculation result to use</Abstract>
				</Parameter><Parameter>
					<Name>cellIdentifier</Name>
					<Abstract type="html">cell identifier in Excel style (ex. @&quot;A1&quot;)</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to use, nil for default.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/writeFormula:withResult:toCell:withFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setColumnWidth:forColumn:toColumn:andFormat:withOptions:</TokenIdentifier>
			<Abstract type="html">Sets width and format of a column.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)setColumnWidth:(int)width forColumn:(int)startColumn toColumn:(int)endColumn andFormat:(SIXLSXFormat *)cellFormat withOptions:(SIXLSXRowColOptions *)options</Declaration>
			<Parameters>
				<Parameter>
					<Name>width</Name>
					<Abstract type="html">width of the column in number of characters in the default font (Calibri 11pt)</Abstract>
				</Parameter><Parameter>
					<Name>startColumn</Name>
					<Abstract type="html">index of the first column</Abstract>
				</Parameter><Parameter>
					<Name>endColumn</Name>
					<Abstract type="html">index of the last column</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">ormat to apply or nil</Abstract>
				</Parameter><Parameter>
					<Name>options</Name>
					<Abstract type="html">options to apply</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/setColumnWidth:forColumn:toColumn:andFormat:withOptions:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setColumnWidth:forColumn:toColumn:andFormat:</TokenIdentifier>
			<Abstract type="html">Sets width and format of a column.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)setColumnWidth:(int)width forColumn:(int)startColumn toColumn:(int)endColumn andFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>width</Name>
					<Abstract type="html">width of the column in number of characters in the default font (Calibri 11pt)</Abstract>
				</Parameter><Parameter>
					<Name>startColumn</Name>
					<Abstract type="html">index of the first column</Abstract>
				</Parameter><Parameter>
					<Name>endColumn</Name>
					<Abstract type="html">index of the last column</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to apply or nil</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/setColumnWidth:forColumn:toColumn:andFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setColumnWidth:forColumnRange:andFormat:</TokenIdentifier>
			<Abstract type="html">Sets width and format of a column.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)setColumnWidth:(int)width forColumnRange:(NSString *)columnRange andFormat:(SIXLSXFormat *)cellFormat</Declaration>
			<Parameters>
				<Parameter>
					<Name>width</Name>
					<Abstract type="html">width of the column in number of characters in the default font (Calibri 11pt)</Abstract>
				</Parameter><Parameter>
					<Name>columnRange</Name>
					<Abstract type="html">range of columns to be affected in Excel style syntax (ex. &quot;A:E&quot;)</Abstract>
				</Parameter><Parameter>
					<Name>cellFormat</Name>
					<Abstract type="html">format to apply or nil</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/setColumnWidth:forColumnRange:andFormat:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setAutoFilterForStartRow:startColumn:endRow:endColumn:</TokenIdentifier>
			<Abstract type="html">The setAutoFilter function allows an autofilter to be added to a worksheet.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)setAutoFilterForStartRow:(int)startRow startColumn:(int)startColumn endRow:(int)endRow endColumn:(int)endColumn</Declaration>
			<Parameters>
				<Parameter>
					<Name>startRow</Name>
					<Abstract type="html">The first row of the range. (All zero indexed.)</Abstract>
				</Parameter><Parameter>
					<Name>startColumn</Name>
					<Abstract type="html">The first column of the range.</Abstract>
				</Parameter><Parameter>
					<Name>endRow</Name>
					<Abstract type="html">The last row of the range.</Abstract>
				</Parameter><Parameter>
					<Name>endColumn</Name>
					<Abstract type="html">The last col of the range.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/setAutoFilterForStartRow:startColumn:endRow:endColumn:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setAutoFilterForCellRange:</TokenIdentifier>
			<Abstract type="html">The setAutoFilter function allows an autofilter to be added to a worksheet.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)setAutoFilterForCellRange:(NSString *)cellRange</Declaration>
			<Parameters>
				<Parameter>
					<Name>cellRange</Name>
					<Abstract type="html">The cell range for this autofilter in Excel syntax (ex. @&quot;A1:D51&quot;)</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/setAutoFilterForCellRange:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/repeatRowsFirstRow:lastRow:</TokenIdentifier>
			<Abstract type="html">For large Excel documents it is often desirable to have the first row or rows of the worksheet print out at the top of each page.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)repeatRowsFirstRow:(int)firstRow lastRow:(int)lastRow</Declaration>
			<Parameters>
				<Parameter>
					<Name>firstRow</Name>
					<Abstract type="html">First row of repeat range.</Abstract>
				</Parameter><Parameter>
					<Name>lastRow</Name>
					<Abstract type="html">Last row of repeat range.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/repeatRowsFirstRow:lastRow:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/repeatColumnsFirstColumn:lastColumn:</TokenIdentifier>
			<Abstract type="html">For large Excel documents it is often desirable to have the first column or columns of the worksheet print out at the left of each page.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (BOOL)repeatColumnsFirstColumn:(int)firstCol lastColumn:(int)lastColumn</Declaration>
			<Parameters>
				<Parameter>
					<Name>firstCol</Name>
					<Abstract type="html">First column of repeat range.</Abstract>
				</Parameter><Parameter>
					<Name>lastColumn</Name>
					<Abstract type="html">Last column of repeat range.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/repeatColumnsFirstColumn:lastColumn:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setPageOrientation:</TokenIdentifier>
			<Abstract type="html">This function is used to set the orientation of a worksheet&apos;s printed page to landscape or portrait.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
			<Declaration>- (void)setPageOrientation:(NSPaperOrientation)orientation</Declaration>
			<Parameters>
				<Parameter>
					<Name>orientation</Name>
					<Abstract type="html">orientation to set: NSPaperOrientationPortrait (default) or NSPaperOrientationLandscape

@default NSPaperOrientationPortrait</Abstract>
				</Parameter>
			</Parameters>
			
			<Anchor>//api/name/setPageOrientation:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setHeader:</TokenIdentifier>
			<Abstract type="html">Headers and footers are generated using a string which is a combination of plain text and control characters.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setFooter:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)setHeader:(NSString *)headerString</Declaration>
			<Parameters>
				<Parameter>
					<Name>headerString</Name>
					<Abstract type="html">The formar string for the print header.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/setHeader:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
		<Token>
			<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setFooter:</TokenIdentifier>
			<Abstract type="html">Headers and footers are generated using a string which is a combination of plain text and control characters.</Abstract>
			<DeclaredIn>SIXLSXWriter.h</DeclaredIn>
			
	<RelatedTokens>
		<TokenIdentifier>//apple_ref/occ/instm/SIXLSXWorksheet/setHeader:</TokenIdentifier>
		
	</RelatedTokens>
	
			<Declaration>- (BOOL)setFooter:(NSString *)footerString</Declaration>
			<Parameters>
				<Parameter>
					<Name>headerString</Name>
					<Abstract type="html">The formar string for the print header.</Abstract>
				</Parameter>
			</Parameters>
			<ReturnValue><Abstract type="html">YES if successful, NO if not.</Abstract></ReturnValue>
			<Anchor>//api/name/setFooter:</Anchor>
            <NodeRef refid="6"/>
		</Token>
		
        
        
	</File>
</Tokens>